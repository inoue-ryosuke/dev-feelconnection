openapi: 3.0.0
info:
  title: 'FeelConnection API仕様書'
  version: '1.0'
paths:
  /api/account:
    post:
      tags:
        - Account
      summary: 'API-xx: 個人情報入力確認・更新・登録API'
      description: "入力・確認時は、各データのバリデーションチェックを行う。\r\n    変更時は、各データのバリデーションチェックを行い、DBを更新する。\r\n    登録時は、各データのバリデーションチェックを行い、DBへ登録し、登録完了メールを送信する。"
      operationId: 'App\Http\Controllers\Api\AccountController::validateAccount'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                type:
                  description: '1:入力・確認、２：変更、３：登録'
                  type: integer
                name:
                  description: 名前（漢字）
                  type: string
                kana:
                  description: 名前(カタカナ)
                  type: string
                b_year:
                  description: 生年月日(年)
                  type: integer
                b_month:
                  description: 生年月日(月)
                  type: integer
                b_day:
                  description: 生年月日(日)
                  type: integer
                sex:
                  description: '性別(1:男性、2:女性)'
                  type: integer
                h_zip:
                  description: 郵便番号
                  type: string
                h_pref:
                  description: 都道府県
                  type: string
                h_addr:
                  description: 番地、建物名
                  type: string
                h_tel:
                  description: 電話番号・市外局番
                  type: string
                dm:
                  description: 'ご案内メール受信許可(0:可　1:不可)'
                  type: integer
                pc_conf:
                  description: '事前予約案内メール受信許可(0:可　1:不可)'
                  type: integer
                login_pass:
                  description: パスワード
                  type: string
                login_pass_confirmation:
                  description: パスワード（確認）
                  type: string
                campaign_code:
                  description: キャンペーンコード
                  type: string
                pc_mail:
                  description: メールアドレス
                  type: string
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result_code: { description: '結果コード(0:正常 1:エラー)', type: integer }
                type: object
  /api/get_json_sample:
    post:
      tags:
        - Sample
      summary: 'API-xx: テストAPI'
      description: JSONサンプルを表示するためのAPI
      operationId: 'App\Http\Controllers\Api\ApiTestController::getJsonSample'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                paramater1:
                  description: リクエストパラメータ1
                  type: integer
                paramater2:
                  description: リクエストパラメータ2
                  type: integer
              type: object
      responses:
        '200':
          description: OK
          headers:
            X-FeelConnection-Required-Ver:
              description: 対応バージョン
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  date: { description: 日付（サンプル）, type: date }
                  name: { description: 名前（サンプル）, type: string }
                  parameters: { description: パラメータ（サンプル）, properties: { param1: { description: オブジェクト内パラメータ1（サンプル）, type: string }, param2: { description: オブジェクト内オブジェクト2（サンプル）, properties: { key: { description: オブジェクト2パラメータキー, type: string }, value: { description: オブジェクト2パラメータ値, type: string } }, type: object }, param3: { description: 配列内オブジェクトパラメータ群3（サンプル）, type: array, items: { properties: { param3_key: { description: オブジェクト3パラメータキー, type: string }, param3_value: { description: オブジェクト3パラメータ値, type: string } }, type: object } } }, type: object }
                type: object
  /api/auth:
    post:
      tags:
        - Auth
      summary: 'API-001: 認証情報の取得'
      description: 認証されている会員情報を取得
      operationId: 'App\Http\Controllers\Api\AuthController::getAuthInfo'
      responses:
        '200':
          description: OK
          headers:
            X-FeelConnection-Required-Ver:
              description: 対応バージョン
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  result_code: { description: '0:正常 1:エラー(フロント側のダイアログ制御仕分け用)', type: integer }
                  name: { description: 認証ユーザー名称, type: string }
                  kana: { description: 認証ユーザー名フリガナ, type: string }
                  mail: { description: PCメールアドレス, type: string }
                  b_birthday: { description: 生年月日（和暦）, type: string }
                  b_year: { description: 生年月日（西暦：年）, type: integer }
                  b_month: { description: 生年月日（西暦：月）, type: integer }
                  b_day: { description: 生年月日（西暦：日）, type: integer }
                  sex: { description: '性別（1:男性 2:女性 3:未設定）', type: integer }
                  h_zip: { description: 郵便番号（ハイフンを含む）, type: string }
                  h_pref: { description: 都道府県, type: string }
                  h_addr: { description: 番地、建物名, type: string }
                  h_tel: { description: 電話番号（ハイフンなし）, type: string }
                  memtype_name: { description: 会員種別名（変更がある場合は（変更登録あり）の文言が末尾に追加）, type: string }
                  store_name: { description: 所属店名（複数想定：「、」区切り）, type: string }
                  dm_list: { description: '案内メール(現行では1:PCメールのみ想定)  チェックON= 1:PCメールのみON  チェックOFF=5:拒否のみON', type: string }
                  pc_conf: { description: '予約確認メール（0：予約確認メールしない　1:予約確認メールする）', type: integer }
                  gmo_credit: { description: GMO関連の手続き処理（外部URL）に指定するパラメータ, type: string }
                type: object
        '403':
          description: 'NG（403:認証失敗時）'
          headers:
            X-FeelConnection-Required-Ver:
              description: 対応バージョン
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  result_code: { description: '1:エラー(フロント側のダイアログ制御仕分け用)', type: integer }
                  error_id: { description: サーバ返却エラーID（通常はHTTPレスポンスコード）, type: string }
                  error_code: { description: サーバ返却エラーコード, type: string }
                  message: { description: サーバ返却エラーメッセージ, type: string }
                type: object
  /api/instructors:
    post:
      tags:
        - Instructor
      summary: 'API-xx: インストラクター紹介一覧取得API'
      description: インストラクター紹介画面に表示するインストラクターの一覧を取得する
      operationId: 'App\Http\Controllers\Api\InstructorController::getInstructors'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                freeword:
                  description: 検索ワード(インストラクター名、店舗名を入力して検索)
                  type: string
                limit:
                  description: 取得上限数(データ取得数を指定)
                  type: integer
                offset:
                  description: オフセット数(取得オフセット数を指定)
                  type: integer
                type:
                  description: 'ソート対象項目(ソート対象項目を指定(1：所属店舗順(北から) / 2：デビュー年順(古い在籍順) / 3：名前順(ABC順)))'
                  type: integer
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result_code: { description: '結果コード(0:正常 1:エラー)', type: integer }
                  instructors: { description: インストラクター一覧リスト, type: array, items: { properties: { uid: { description: スタッフID(インストラクターID。インストラクター詳細情報取得用。), type: integer }, name: { description: スタッフ名(インストラクター名), type: string }, assigned_at: { description: インストラクターのデビュー年月日, type: date }, comment: { description: インストラクターの自己紹介文, type: string }, image_path: { description: インストラクターの表示画像パス(画像URL), type: string } }, type: object } }
                  sort_results: { description: ソート店舗リスト, type: array, items: { properties: { name: { description: 店舗名, type: string }, instructors: { description: 店舗所属インストラクターリスト, type: array, items: { properties: { uid: { description: スタッフID(インストラクターID), type: integer } }, type: object } } }, type: object } }
                  total_count: { description: データ全件数, type: integer }
                  list_count: { description: 取得したリストのデータ件数, type: integer }
                  limit: { description: 取得上限数(リクエストで指定された取得数), type: integer }
                  offset: { description: オフセット数(リクエストで指定された取得オフセット数), type: integer }
                  type: { description: ソート対象項目(リクエストで指定されたソート対象), type: integer }
                type: object
  '/api/invite/{invite_code}':
    get:
      tags:
        - Invite
      summary: 'API-xx: 紹介URL有効性確認API'
      description: '対象の紹介URLに埋め込まれた{invite_code}の有効性を確認する。'
      operationId: 'App\Http\Controllers\Api\InviteController::validateInviteCode'
      responses:
        '200':
          description: OK
          headers:
            X-FeelConnection-Required-Ver:
              description: 対応バージョン
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  result_code: { description: '結果コード(0:正常 1:エラー)', type: integer }
                  lid: { description: レッスンID, type: integer }
                  lesson_flag: { description: 'レッスン受講可能判定(0:不可　1:可(申し込んだレッスンが受講可能か判定。受講可能の場合は1:可))', type: integer }
                  friend_flag: { description: '友人紹介判定(0:偽　1:真(アカウント登録か体験レッスン申込か判定。アカウント登録の場合は1:真))', type: integer }
                type: object
  /api/apple_music:
    get:
      tags:
        - Music
      summary: 'API-xx: AppleMusic情報取得API'
      description: AppleMusicの情報を取得する
      operationId: 'App\Http\Controllers\Api\MusicController::getMusicPlaylist'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result_code: { description: '結果コード(0:正常 1:エラー)', type: integer }
                  list: { description: 音楽プログラムリスト, type: array, items: { properties: { '{category_name}': { description: 'BBC HIT,BB1 COMP等カテゴリー毎にグルーピングされたリスト', type: array, items: { properties: { name: { description: "プレイリスト名(表示プレイリスト名　＝　プログラム名 ＋ 音楽ジャンル名 ＋ バージョン\r\n    ex) BB2 HIT 16  = BB2 + HIT + 16)", type: string }, path: { description: 'プレイリストパス(URL)(AppleMusicのプレイリスト詳細へのURL )', type: string }, image_path: { description: プレイリスト画像パス(URL)(AppleMusicのプレイリスト画像パス(URL), type: string } }, type: object } } }, type: object } }
                type: object
  /api/zip_code:
    post:
      tags:
        - ZipCode
      summary: 'API-xx: 郵便番号住所取得API'
      description: リクエストされた郵便番号から対応する住所を取得する
      operationId: 'App\Http\Controllers\Api\ZipCodeController::getAddressByZipCode'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                zip_code:
                  description: 郵便番号(7桁)
                  type: string
              type: object
      responses:
        '200':
          description: OK
          headers:
            X-FeelConnection-Required-Ver:
              description: 対応バージョン
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  result_code: { description: '結果コード(0:正常 1:エラー)', type: integer }
                  zip_code: { description: 郵便番号, type: string }
                  prefecture: { description: 都道府県名, type: string }
                  address: { description: 住所, type: string }
                type: object
